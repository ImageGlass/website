// <auto-generated />
using System;
using ImageGlass.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ImageGlass.Migrations
{
    [DbContext(typeof(ImageGlassContext))]
    [Migration("20221103144316_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("ImageGlass.Models.DownloadModel", b =>
                {
                    b.Property<int>("DownloadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Architecture")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Checksum")
                        .HasColumnType("text");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("ReleaseCode")
                        .HasColumnType("text");

                    b.Property<int>("ReleaseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Size")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.HasKey("DownloadId");

                    b.HasIndex("ReleaseId");

                    b.ToTable("Downloads");
                });

            modelBuilder.Entity("ImageGlass.Models.NewsModel", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.HasKey("NewsId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ImageGlass.Models.ReleaseImageModel", b =>
                {
                    b.Property<int>("ReleaseImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<int>("ReleaseId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReleaseImageId");

                    b.HasIndex("ReleaseId");

                    b.ToTable("ReleaseImages");
                });

            modelBuilder.Entity("ImageGlass.Models.ReleaseModel", b =>
                {
                    b.Property<int>("ReleaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("ReleaseType")
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReleaseId");

                    b.ToTable("Releases");
                });

            modelBuilder.Entity("ImageGlass.Models.ThemeImageModel", b =>
                {
                    b.Property<int>("ThemeImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<int>("ThemeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.HasKey("ThemeImageId");

                    b.HasIndex("ThemeId");

                    b.ToTable("ThemeImages");
                });

            modelBuilder.Entity("ImageGlass.Models.ThemeModel", b =>
                {
                    b.Property<int>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("Compatibility")
                        .HasColumnType("text");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("ThemeId");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("ImageGlass.Models.DownloadModel", b =>
                {
                    b.HasOne("ImageGlass.Models.ReleaseModel", "Release")
                        .WithMany("Downloads")
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Release");
                });

            modelBuilder.Entity("ImageGlass.Models.ReleaseImageModel", b =>
                {
                    b.HasOne("ImageGlass.Models.ReleaseModel", "Release")
                        .WithMany("ReleaseImages")
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Release");
                });

            modelBuilder.Entity("ImageGlass.Models.ThemeImageModel", b =>
                {
                    b.HasOne("ImageGlass.Models.ThemeModel", "Theme")
                        .WithMany("ThemeImages")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("ImageGlass.Models.ReleaseModel", b =>
                {
                    b.Navigation("Downloads");

                    b.Navigation("ReleaseImages");
                });

            modelBuilder.Entity("ImageGlass.Models.ThemeModel", b =>
                {
                    b.Navigation("ThemeImages");
                });
#pragma warning restore 612, 618
        }
    }
}
